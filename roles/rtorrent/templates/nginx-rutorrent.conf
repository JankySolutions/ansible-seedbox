server {
        listen 443  ssl spdy default_server;
        listen [::]:443 ssl spdy default_server;

        root {{ rutorrent_install_path}};

        index index.html index.php;

        server_name {{ ansible_fqdn }};

        location / {
                try_files $uri $uri/ =404;
                auth_basic "{{ rtorrent_auth_realm }}";
                auth_basic_user_file {{ auth_basic_file }};
        }

        location ~ \.php$ {
               include snippets/fastcgi-php.conf;

               # With php5-fpm:
               fastcgi_pass unix:/var/run/php5-fpm.sock;
        }

        location /{{ rtorrent_RPC_path }} {
              scgi_param  REQUEST_METHOD     $request_method;
              scgi_param  REQUEST_URI        $request_uri;
              scgi_param  QUERY_STRING       $query_string;
              scgi_param  CONTENT_TYPE       $content_type;

              scgi_param  DOCUMENT_URI       $document_uri;
              scgi_param  DOCUMENT_ROOT      $document_root;
              scgi_param  SCGI               1;
              scgi_param  SERVER_PROTOCOL    $server_protocol;
              scgi_param  HTTPS              $https if_not_empty;

              scgi_param  REMOTE_ADDR        $remote_addr;
              scgi_param  REMOTE_PORT        $remote_port;
              scgi_param  SERVER_PORT        $server_port;
              scgi_param  SERVER_NAME        $server_name;
              scgi_pass {{ rtorrent_scgi_bind_address }}:{{ rtorrent_scgi_bind_port }};
        }

        location ~ /\.ht {
               deny all;
        }

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        ssl_certificate /etc/letsencrypt/live/{{ letsencrypt_cert_domain }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ letsencrypt_cert_domain }}/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;

        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
        ssl_dhparam {{ dhparam_path }};

        # intermediate configuration. tweak to your needs.
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header "Strict-Transport-Security" "max-age=15768000; includeSubDomains; preload";

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/{{ letsencrypt_cert_domain }}/chain.pem;

        resolver 8.8.8.8;
}
